// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: src/main/jflex/itcm/Lexer.flex

package itcm;
import java.util.*;


@SuppressWarnings("fallthrough")
public class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u1c00\126\u1100\1\u2600\1\u1100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u1100\1\u2d00\10\u2e00"+
    "\31\u2000\1\u1100\1\u2f00\1\u3000\1\u1100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u1100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u2000\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u1100\1\u5200\1\u5300\1\u5400\11\u2000\1\u5500\4\u1100\1\u5600"+
    "\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900\2\u2000"+
    "\1\u5a00\1\u5b00\27\u1100\1\u5c00\4\u1100\1\u5d00\1\u5e00\41\u2000"+
    "\1\u5f00\1\u1100\1\u6000\1\u6100\11\u2000\1\u6200\27\u2000\1\u6300"+
    "\1\u6400\1\u6500\1\u6600\7\u2000\1\u6700\1\u2000\1\u6800\1\u6900"+
    "\4\u2000\1\u6a00\1\u6b00\1\u6c00\2\u2000\1\u6d00\1\u2000\1\u6e00"+
    "\21\u2000\246\u1100\1\u6f00\20\u1100\1\u7000\1\u7100\25\u1100\1\u7200"+
    "\34\u1100\1\u7300\14\u2000\2\u1100\1\u7400\5\u2000\23\u1100\1\u7500"+
    "\u0dec\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\3\0\1\7\3\0\1\10\1\11\2\12\1\0\1\12"+
    "\1\13\1\12\12\14\3\0\1\15\3\0\1\16\7\7"+
    "\1\17\4\7\1\20\1\7\1\21\1\7\1\22\1\7"+
    "\1\23\1\7\1\24\4\7\4\0\1\7\1\0\1\16"+
    "\7\7\1\17\4\7\1\20\1\7\1\21\1\7\1\22"+
    "\1\7\1\23\1\7\1\24\4\7\12\0\1\3\32\0"+
    "\1\25\1\0\4\7\4\0\1\7\12\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\70\7\2\17"+
    "\u0190\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0"+
    "\1\7\201\0\5\7\1\0\2\7\2\0\4\7\1\0"+
    "\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0"+
    "\24\7\1\0\123\7\1\0\213\7\10\0\246\7\1\0"+
    "\46\7\2\0\1\7\6\0\51\7\6\0\1\7\100\0"+
    "\33\7\4\0\4\7\30\0\1\7\24\0\53\7\25\0"+
    "\12\14\4\0\2\7\1\0\143\7\1\0\1\7\17\0"+
    "\2\7\7\0\2\7\12\14\3\7\2\0\1\7\20\0"+
    "\1\7\1\0\36\7\35\0\131\7\13\0\1\7\16\0"+
    "\12\14\41\7\11\0\2\7\4\0\1\7\3\0\30\7"+
    "\4\0\1\7\11\0\1\7\3\0\1\7\27\0\31\7"+
    "\7\0\13\7\5\0\30\7\1\0\6\7\21\0\52\7"+
    "\72\0\66\7\3\0\1\7\22\0\1\7\7\0\12\7"+
    "\4\0\12\14\1\0\20\7\4\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7"+
    "\3\0\1\7\20\0\1\7\15\0\2\7\1\0\3\7"+
    "\4\0\12\14\4\7\7\0\2\7\10\0\6\7\4\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\37\0\4\7\1\0\1\7\7\0"+
    "\12\14\2\0\3\7\20\0\11\7\1\0\3\7\1\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\3\0"+
    "\1\7\22\0\1\7\17\0\2\7\4\0\12\14\1\0"+
    "\1\7\7\0\1\7\13\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\3\0"+
    "\1\7\36\0\2\7\1\0\3\7\4\0\12\14\1\0"+
    "\1\7\21\0\1\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\3\0\3\7\3\0\14\7\26\0\1\7\25\0"+
    "\12\14\11\0\1\7\13\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\20\7\3\0\1\7\32\0\3\7\2\0"+
    "\1\7\2\0\2\7\4\0\12\14\20\0\1\7\4\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\3\0\1\7\37\0\2\7\1\0\2\7\4\0"+
    "\12\14\1\0\2\7\21\0\11\7\1\0\3\7\1\0"+
    "\51\7\2\0\1\7\20\0\1\7\5\0\3\7\10\0"+
    "\3\7\4\0\12\14\12\0\6\7\5\0\22\7\3\0"+
    "\30\7\1\0\11\7\1\0\1\7\2\0\7\7\37\0"+
    "\12\14\21\0\60\7\1\0\2\7\13\0\10\7\11\0"+
    "\12\14\47\0\2\7\1\0\1\7\1\0\5\7\1\0"+
    "\30\7\1\0\1\7\1\0\12\7\1\0\2\7\11\0"+
    "\1\7\2\0\5\7\1\0\1\7\11\0\12\14\2\0"+
    "\4\7\40\0\1\7\37\0\12\14\26\0\10\7\1\0"+
    "\44\7\33\0\5\7\163\0\53\7\24\0\1\7\12\14"+
    "\6\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7"+
    "\7\0\3\7\4\0\15\7\14\0\1\7\1\0\12\14"+
    "\6\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7"+
    "\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7"+
    "\45\0\20\7\20\0\126\7\2\0\6\7\3\0\u016c\7"+
    "\2\0\21\7\1\25\32\7\5\0\113\7\3\0\13\7"+
    "\7\0\22\7\15\0\23\7\16\0\22\7\16\0\15\7"+
    "\1\0\3\7\17\0\64\7\43\0\1\7\3\0\2\7"+
    "\3\0\12\14\46\0\12\14\6\0\131\7\7\0\5\7"+
    "\2\0\42\7\1\0\1\7\5\0\106\7\12\0\37\7"+
    "\47\0\12\14\36\7\2\0\5\7\13\0\54\7\4\0"+
    "\32\7\6\0\12\14\46\0\27\7\11\0\65\7\53\0"+
    "\12\14\6\0\12\14\15\0\1\7\135\0\57\7\21\0"+
    "\10\7\3\0\12\14\51\0\36\7\15\0\2\7\12\14"+
    "\54\7\32\0\44\7\34\0\12\14\3\0\3\7\12\14"+
    "\44\7\2\0\11\7\7\0\53\7\2\0\3\7\51\0"+
    "\4\7\1\0\6\7\1\0\2\7\3\0\1\7\5\0"+
    "\300\7\100\0\26\7\2\0\6\7\2\0\46\7\2\0"+
    "\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0"+
    "\6\7\4\0\15\7\5\0\3\7\1\0\7\7\3\0"+
    "\13\25\35\0\2\3\5\0\1\25\17\0\2\7\23\0"+
    "\1\7\12\0\1\25\21\0\1\7\15\0\1\7\20\0"+
    "\15\7\3\0\41\7\101\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0"+
    "\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0177\0"+
    "\345\7\6\0\4\7\3\0\2\7\14\0\46\7\1\0"+
    "\1\7\5\0\1\7\2\0\70\7\7\0\1\7\20\0"+
    "\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\120\0\1\7\320\0\1\25\4\0\3\7\31\0"+
    "\11\7\7\0\5\7\2\0\5\7\4\0\126\7\6\0"+
    "\3\7\1\0\132\7\1\0\4\7\5\0\53\7\1\0"+
    "\136\7\21\0\40\7\60\0\235\7\103\0\56\7\2\0"+
    "\15\7\3\0\20\7\12\14\2\7\24\0\57\7\20\0"+
    "\37\7\2\0\120\7\47\0\11\7\2\0\147\7\2\0"+
    "\100\7\5\0\2\7\1\0\1\7\1\0\5\7\30\0"+
    "\20\7\1\0\3\7\1\0\4\7\1\0\27\7\25\0"+
    "\1\7\7\0\64\7\16\0\62\7\34\0\12\14\30\0"+
    "\6\7\3\0\1\7\1\0\2\7\1\0\12\14\34\7"+
    "\12\0\27\7\31\0\35\7\7\0\57\7\34\0\1\7"+
    "\12\14\6\0\5\7\1\0\12\7\12\14\5\7\1\0"+
    "\51\7\27\0\3\7\1\0\10\7\4\0\12\14\6\0"+
    "\27\7\3\0\1\7\3\0\62\7\1\0\1\7\3\0"+
    "\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0"+
    "\3\7\2\0\13\7\7\0\3\7\14\0\6\7\2\0"+
    "\6\7\2\0\6\7\11\0\7\7\1\0\7\7\1\0"+
    "\53\7\1\0\16\7\6\0\163\7\15\0\12\14\6\0"+
    "\244\7\14\0\27\7\4\0\61\7\4\0\u0100\26\156\7"+
    "\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7"+
    "\1\0\12\7\1\0\15\7\1\0\5\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\154\7\41\0\153\7"+
    "\22\0\100\7\2\0\66\7\50\0\15\7\66\0\2\7"+
    "\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7"+
    "\7\0\1\7\13\0\12\14\7\0\32\7\4\0\1\7"+
    "\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7"+
    "\31\0\14\7\1\0\32\7\1\0\23\7\1\0\2\7"+
    "\1\0\17\7\2\0\16\7\42\0\173\7\105\0\65\7"+
    "\u010b\0\35\7\3\0\61\7\57\0\40\7\15\0\36\7"+
    "\5\0\46\7\12\0\36\7\2\0\44\7\4\0\10\7"+
    "\1\0\5\7\52\0\236\7\2\0\12\14\6\0\44\7"+
    "\4\0\44\7\4\0\50\7\10\0\64\7\14\0\13\7"+
    "\1\0\17\7\1\0\7\7\1\0\2\7\1\0\13\7"+
    "\1\0\17\7\1\0\7\7\1\0\2\7\103\0\67\7"+
    "\11\0\26\7\12\0\10\7\30\0\6\7\1\0\52\7"+
    "\1\0\11\7\105\0\6\7\2\0\1\7\1\0\54\7"+
    "\1\0\2\7\3\0\1\7\2\0\27\7\12\0\27\7"+
    "\11\0\37\7\101\0\23\7\1\0\2\7\12\0\26\7"+
    "\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7"+
    "\17\0\4\7\1\0\3\7\1\0\35\7\52\0\35\7"+
    "\3\0\35\7\43\0\10\7\1\0\34\7\33\0\66\7"+
    "\12\0\26\7\12\0\23\7\15\0\22\7\156\0\111\7"+
    "\67\0\63\7\15\0\63\7\15\0\44\7\14\0\12\14"+
    "\u0146\0\52\7\6\0\2\7\116\0\35\7\12\0\1\7"+
    "\10\0\26\7\52\0\22\7\56\0\25\7\33\0\27\7"+
    "\14\0\65\7\56\0\12\14\1\0\2\7\2\0\1\7"+
    "\15\0\55\7\40\0\31\7\7\0\12\14\11\0\44\7"+
    "\17\0\12\14\4\0\1\7\2\0\1\7\10\0\43\7"+
    "\3\0\1\7\14\0\60\7\16\0\4\7\13\0\12\14"+
    "\1\7\1\0\1\7\43\0\22\7\1\0\31\7\124\0"+
    "\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0"+
    "\12\7\7\0\57\7\21\0\12\14\13\0\10\7\2\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\3\0\1\7\22\0\1\7\14\0\5\7\236\0"+
    "\65\7\22\0\4\7\5\0\12\14\5\0\3\7\36\0"+
    "\60\7\24\0\2\7\1\0\1\7\10\0\12\14\246\0"+
    "\57\7\51\0\4\7\44\0\60\7\24\0\1\7\13\0"+
    "\12\14\46\0\53\7\15\0\1\7\7\0\12\14\66\0"+
    "\33\7\25\0\12\14\6\0\7\7\271\0\54\7\164\0"+
    "\100\7\12\14\25\0\10\7\2\0\1\7\2\0\10\7"+
    "\1\0\2\7\1\0\30\7\17\0\1\7\1\0\1\7"+
    "\136\0\10\7\2\0\47\7\20\0\1\7\1\0\1\7"+
    "\34\0\1\7\12\0\50\7\7\0\1\7\25\0\1\7"+
    "\13\0\56\7\23\0\1\7\22\0\111\7\7\0\11\7"+
    "\1\0\45\7\21\0\1\7\17\0\12\14\30\0\36\7"+
    "\160\0\7\7\1\0\2\7\1\0\46\7\25\0\1\7"+
    "\11\0\12\14\6\0\6\7\1\0\2\7\1\0\40\7"+
    "\16\0\1\7\7\0\12\14\u0136\0\23\7\275\0\1\7"+
    "\54\0\4\7\37\0\232\7\146\0\157\7\21\0\304\7"+
    "\u014c\0\141\7\17\0\57\7\321\0\107\7\271\0\71\7"+
    "\7\0\37\7\1\0\12\14\6\0\117\7\21\0\36\7"+
    "\22\0\60\7\20\0\4\7\14\0\12\14\11\0\25\7"+
    "\5\0\23\7\260\0\100\7\200\0\113\7\5\0\1\7"+
    "\102\0\15\7\100\0\2\7\1\0\1\7\34\0\370\7"+
    "\10\0\326\7\52\0\11\7\u01e7\0\4\7\1\0\7\7"+
    "\1\0\2\7\1\0\43\7\55\0\3\7\21\0\4\7"+
    "\10\0\u018c\7\4\0\153\7\5\0\15\7\3\0\11\7"+
    "\7\0\12\7\146\0\125\7\1\0\107\7\1\0\2\7"+
    "\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7"+
    "\1\0\1\7\1\0\7\7\1\0\101\7\1\0\4\7"+
    "\2\0\10\7\1\0\7\7\1\0\34\7\1\0\4\7"+
    "\1\0\5\7\1\0\1\7\3\0\7\7\1\0\u0154\7"+
    "\2\0\31\7\1\0\31\7\1\0\37\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\10\7\2\0\62\14"+
    "\37\7\341\0\55\7\12\0\7\7\2\0\12\14\4\0"+
    "\1\7\u0141\0\36\7\22\0\54\7\4\0\12\14\5\0"+
    "\1\7\340\0\7\7\1\0\4\7\1\0\2\7\1\0"+
    "\17\7\1\0\305\7\73\0\104\7\7\0\1\7\4\0"+
    "\12\14\u0156\0\1\7\117\0\4\7\1\0\33\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0"+
    "\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0"+
    "\4\7\1\0\1\7\1\0\12\7\1\0\21\7\5\0"+
    "\3\7\1\0\5\7\1\0\21\7\104\0\340\7\40\0"+
    "\71\7\7\0\336\7\2\0\u0182\7\16\0\u0131\7\37\0"+
    "\36\7\342\0\113\7\265\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30208];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\1\1\2\1\3\1\1"+
    "\3\0\2\4\2\0\1\5\11\0\1\6\6\0\2\7"+
    "\3\0\3\7\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\56\0\56\0\105\0\134\0\163"+
    "\0\163\0\163\0\212\0\241\0\163\0\163\0\270\0\317"+
    "\0\346\0\163\0\375\0\u0114\0\u012b\0\u0142\0\u0159\0\u0170"+
    "\0\u0187\0\u019e\0\u01b5\0\56\0\u01cc\0\u01e3\0\u01fa\0\u0211"+
    "\0\u0228\0\u023f\0\u0256\0\u026d\0\u0284\0\u029b\0\u02b2\0\u029b"+
    "\0\u02c9\0\u02e0\0\u02f7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\2\4\13\3\1\6\2\3\1\7"+
    "\1\3\1\5\1\3\1\10\2\11\2\10\1\12\12\3"+
    "\1\6\2\3\1\7\1\12\1\5\51\0\1\13\22\0"+
    "\1\14\11\0\1\15\3\16\1\17\1\15\16\0\1\15"+
    "\20\0\1\20\31\0\1\21\5\0\1\15\1\22\2\16"+
    "\1\17\1\15\16\0\1\15\21\0\1\23\14\0\1\24"+
    "\43\0\1\25\12\0\1\26\6\0\7\26\12\0\1\27"+
    "\24\0\1\30\1\26\6\0\7\26\11\0\1\31\4\0"+
    "\1\32\1\0\7\31\17\0\1\33\20\0\1\31\1\0"+
    "\1\34\1\35\3\0\7\31\13\0\1\34\1\35\1\36"+
    "\1\32\20\0\1\37\27\0\1\40\4\0\1\41\1\0"+
    "\7\40\16\0\1\42\21\0\1\43\4\0\1\44\1\0"+
    "\7\43\11\0\1\40\1\0\1\34\2\0\1\41\1\0"+
    "\7\40\11\0\1\40\1\0\1\34\1\0\1\45\1\41"+
    "\1\0\7\40\13\0\1\34\1\35\1\0\1\42\21\0"+
    "\1\43\2\0\1\46\3\0\7\43\14\0\1\46\1\47"+
    "\1\44\26\0\1\40\21\0\1\50\4\0\1\51\1\0"+
    "\7\50\16\0\1\52\21\0\1\50\3\0\1\53\1\51"+
    "\1\0\7\50\14\0\1\46\1\0\1\52\26\0\1\50"+
    "\12\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[782];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\5\1\3\0\2\1\2\0\1\1\11\0"+
    "\1\11\6\0\2\1\3\0\3\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    String name;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print("?");
            }
          // fall through
          case 8: break;
          case 2:
            { 
            }
          // fall through
          case 9: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 10: break;
          case 4:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("void, line: " + yyline);
            }
          // fall through
          case 11: break;
          case 5:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("void, line: " + yyline);
            }
          // fall through
          case 12: break;
          case 6:
            { System.out.println("line " + yyline + ": function");
    int par_izq = yytext().indexOf("(");
    int par_der = yytext().indexOf(")");
    System.out.println("fun: print - params: " + yytext().substring(par_izq+1, par_der));
            }
          // fall through
          case 13: break;
          case 7:
            { System.out.println("line: " + yyline + ": variable");
        String tmp = yytext().trim();

        int first_space = tmp.indexOf(" ");
        int eq_sign = tmp.indexOf("=");
        String id_string = tmp.substring(first_space, eq_sign).trim();

        String value_string = tmp.substring(eq_sign+1).trim();

        System.out.println("id: " + id_string + " - value: " + value_string);
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
