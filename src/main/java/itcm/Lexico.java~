// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: src/main/jflex/itcm/Lexer.flex

package itcm;
import java.util.*;


@SuppressWarnings("fallthrough")
public class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u1c00\121\u1100\1\u2600\4\u1100\1\u2700"+
    "\1\u1100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u1100"+
    "\1\u2e00\10\u2f00\31\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u1100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\12\u2000\4\u1100"+
    "\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900"+
    "\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\4\u1100\1\u5d00\1\u5e00"+
    "\42\u2000\1\u1100\1\u5f00\1\u6000\11\u2000\1\u6100\27\u2000\1\u6200"+
    "\1\u6300\1\u6400\1\u6500\11\u2000\1\u6600\1\u6700\5\u2000\1\u6800"+
    "\1\u6900\2\u2000\1\u6a00\1\u2000\1\u6b00\21\u2000\246\u1100\1\u6c00"+
    "\20\u1100\1\u6d00\1\u6e00\25\u1100\1\u6f00\34\u1100\1\u7000\14\u2000"+
    "\2\u1100\1\u7100\5\u2000\23\u1100\1\u7200\u0dec\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\22\0\1\2\3\0\1\3\1\4\2\0"+
    "\1\5\1\6\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\12\14\1\0\1\15\1\16\1\17\1\20\2\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\3\1\32\1\33\1\34\1\35\1\36\1\3\1\37"+
    "\1\40\1\41\1\42\5\3\4\0\1\3\1\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\3\1\32\1\33\1\34\1\35\1\36\1\3\1\37"+
    "\1\40\1\41\1\42\5\3\1\43\1\0\1\44\7\0"+
    "\1\1\34\0\4\3\4\0\1\3\12\0\1\3\4\0"+
    "\1\3\5\0\27\3\1\0\37\3\1\0\70\3\2\31"+
    "\115\3\1\40\u0142\3\4\0\14\3\16\0\5\3\7\0"+
    "\1\3\1\0\1\3\201\0\5\3\1\0\2\3\2\0"+
    "\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0"+
    "\1\3\1\0\24\3\1\0\123\3\1\0\213\3\10\0"+
    "\246\3\1\0\46\3\2\0\1\3\6\0\51\3\6\0"+
    "\1\3\100\0\33\3\4\0\4\3\30\0\1\3\24\0"+
    "\53\3\25\0\12\14\4\0\2\3\1\0\143\3\1\0"+
    "\1\3\17\0\2\3\7\0\2\3\12\14\3\3\2\0"+
    "\1\3\20\0\1\3\1\0\36\3\35\0\131\3\13\0"+
    "\1\3\16\0\12\14\41\3\11\0\2\3\4\0\1\3"+
    "\3\0\30\3\4\0\1\3\11\0\1\3\3\0\1\3"+
    "\27\0\31\3\7\0\13\3\65\0\25\3\1\0\22\3"+
    "\74\0\66\3\3\0\1\3\22\0\1\3\7\0\12\3"+
    "\4\0\12\14\1\0\20\3\4\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3"+
    "\3\0\1\3\20\0\1\3\15\0\2\3\1\0\3\3"+
    "\4\0\12\14\4\3\7\0\2\3\10\0\6\3\4\0"+
    "\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\2\3\37\0\4\3\1\0\1\3\7\0"+
    "\12\14\2\0\3\3\20\0\11\3\1\0\3\3\1\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\5\3\3\0"+
    "\1\3\22\0\1\3\17\0\2\3\4\0\12\14\1\0"+
    "\1\3\7\0\1\3\13\0\10\3\2\0\2\3\2\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\5\3\3\0"+
    "\1\3\36\0\2\3\1\0\3\3\4\0\12\14\1\0"+
    "\1\3\21\0\1\3\1\0\6\3\3\0\3\3\1\0"+
    "\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0"+
    "\2\3\3\0\3\3\3\0\14\3\26\0\1\3\25\0"+
    "\12\14\11\0\1\3\13\0\10\3\1\0\3\3\1\0"+
    "\27\3\1\0\20\3\3\0\1\3\32\0\3\3\5\0"+
    "\2\3\4\0\12\14\20\0\1\3\4\0\10\3\1\0"+
    "\3\3\1\0\27\3\1\0\12\3\1\0\5\3\3\0"+
    "\1\3\40\0\1\3\1\0\2\3\4\0\12\14\1\0"+
    "\2\3\21\0\11\3\1\0\3\3\1\0\51\3\2\0"+
    "\1\3\20\0\1\3\5\0\3\3\10\0\3\3\4\0"+
    "\12\14\12\0\6\3\5\0\22\3\3\0\30\3\1\0"+
    "\11\3\1\0\1\3\2\0\7\3\37\0\12\14\21\0"+
    "\60\3\1\0\2\3\13\0\10\3\11\0\12\14\47\0"+
    "\2\3\1\0\1\3\1\0\5\3\1\0\30\3\1\0"+
    "\1\3\1\0\12\3\1\0\2\3\11\0\1\3\2\0"+
    "\5\3\1\0\1\3\11\0\12\14\2\0\4\3\40\0"+
    "\1\3\37\0\12\14\26\0\10\3\1\0\44\3\33\0"+
    "\5\3\163\0\53\3\24\0\1\3\12\14\6\0\6\3"+
    "\4\0\4\3\3\0\1\3\3\0\2\3\7\0\3\3"+
    "\4\0\15\3\14\0\1\3\1\0\12\14\6\0\46\3"+
    "\1\0\1\3\5\0\1\3\2\0\53\3\1\0\u014d\3"+
    "\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3"+
    "\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3"+
    "\2\0\7\3\1\0\1\3\1\0\4\3\2\0\17\3"+
    "\1\0\71\3\1\0\4\3\2\0\103\3\45\0\20\3"+
    "\20\0\126\3\2\0\6\3\3\0\u016c\3\2\0\21\3"+
    "\1\0\32\3\5\0\113\3\3\0\13\3\7\0\15\3"+
    "\1\0\4\3\16\0\22\3\16\0\22\3\16\0\15\3"+
    "\1\0\3\3\17\0\64\3\43\0\1\3\3\0\2\3"+
    "\3\0\12\14\46\0\12\14\6\0\131\3\7\0\5\3"+
    "\2\0\42\3\1\0\1\3\5\0\106\3\12\0\37\3"+
    "\47\0\12\14\36\3\2\0\5\3\13\0\54\3\4\0"+
    "\32\3\6\0\12\14\46\0\27\3\11\0\65\3\53\0"+
    "\12\14\6\0\12\14\15\0\1\3\135\0\57\3\21\0"+
    "\7\3\4\0\12\14\51\0\36\3\15\0\2\3\12\14"+
    "\54\3\32\0\44\3\34\0\12\14\3\0\3\3\12\14"+
    "\44\3\2\0\11\3\7\0\53\3\2\0\3\3\51\0"+
    "\4\3\1\0\6\3\1\0\2\3\3\0\1\3\5\0"+
    "\300\3\100\0\26\3\2\0\6\3\2\0\46\3\2\0"+
    "\6\3\2\0\10\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\37\3\2\0\65\3\1\0\7\3\1\0"+
    "\1\3\3\0\3\3\1\0\7\3\3\0\4\3\2\0"+
    "\6\3\4\0\15\3\5\0\3\3\1\0\7\3\53\0"+
    "\2\1\25\0\2\3\23\0\1\3\34\0\1\3\15\0"+
    "\1\3\20\0\15\3\3\0\40\3\102\0\1\3\4\0"+
    "\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0"+
    "\13\3\2\0\4\3\5\0\5\3\4\0\1\3\21\0"+
    "\51\3\u0177\0\57\3\1\0\57\3\1\0\205\3\6\0"+
    "\4\3\3\0\2\3\14\0\46\3\1\0\1\3\5\0"+
    "\1\3\2\0\70\3\7\0\1\3\20\0\27\3\11\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\120\0"+
    "\1\3\325\0\3\3\31\0\11\3\7\0\5\3\2\0"+
    "\5\3\4\0\126\3\6\0\3\3\1\0\132\3\1\0"+
    "\4\3\5\0\53\3\1\0\136\3\21\0\40\3\60\0"+
    "\u010d\3\3\0\215\3\103\0\56\3\2\0\15\3\3\0"+
    "\20\3\12\14\2\3\24\0\57\3\20\0\37\3\2\0"+
    "\120\3\47\0\11\3\2\0\147\3\2\0\65\3\2\0"+
    "\11\3\52\0\15\3\1\0\3\3\1\0\4\3\1\0"+
    "\27\3\25\0\1\3\7\0\64\3\16\0\62\3\34\0"+
    "\12\14\30\0\6\3\3\0\1\3\1\0\2\3\1\0"+
    "\12\14\34\3\12\0\27\3\31\0\35\3\7\0\57\3"+
    "\34\0\1\3\12\14\6\0\5\3\1\0\12\3\12\14"+
    "\5\3\1\0\51\3\27\0\3\3\1\0\10\3\4\0"+
    "\12\14\6\0\27\3\3\0\1\3\3\0\62\3\1\0"+
    "\1\3\3\0\2\3\2\0\5\3\2\0\1\3\1\0"+
    "\1\3\30\0\3\3\2\0\13\3\7\0\3\3\14\0"+
    "\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0"+
    "\7\3\1\0\53\3\1\0\16\3\6\0\163\3\15\0"+
    "\12\14\6\0\244\3\14\0\27\3\4\0\61\3\4\0"+
    "\u0100\1\156\3\2\0\152\3\46\0\7\3\14\0\5\3"+
    "\5\0\1\3\1\0\12\3\1\0\15\3\1\0\5\3"+
    "\1\0\1\3\1\0\2\3\1\0\2\3\1\0\154\3"+
    "\41\0\153\3\22\0\100\3\2\0\66\3\50\0\15\3"+
    "\66\0\2\3\30\0\3\3\31\0\1\3\6\0\5\3"+
    "\1\0\207\3\7\0\1\3\13\0\12\14\7\0\32\3"+
    "\4\0\1\3\1\0\32\3\13\0\131\3\3\0\6\3"+
    "\2\0\6\3\2\0\6\3\2\0\3\3\3\0\2\3"+
    "\3\0\2\3\31\0\14\3\1\0\32\3\1\0\23\3"+
    "\1\0\2\3\1\0\17\3\2\0\16\3\42\0\173\3"+
    "\105\0\65\3\u010b\0\35\3\3\0\61\3\57\0\40\3"+
    "\15\0\36\3\5\0\46\3\12\0\36\3\2\0\44\3"+
    "\4\0\10\3\1\0\5\3\52\0\236\3\2\0\12\14"+
    "\6\0\44\3\4\0\44\3\4\0\50\3\10\0\64\3"+
    "\234\0\67\3\11\0\26\3\12\0\10\3\230\0\6\3"+
    "\2\0\1\3\1\0\54\3\1\0\2\3\3\0\1\3"+
    "\2\0\27\3\12\0\27\3\11\0\37\3\101\0\23\3"+
    "\1\0\2\3\12\0\26\3\12\0\32\3\106\0\70\3"+
    "\6\0\2\3\100\0\1\3\17\0\4\3\1\0\3\3"+
    "\1\0\35\3\52\0\35\3\3\0\35\3\43\0\10\3"+
    "\1\0\34\3\33\0\66\3\12\0\26\3\12\0\23\3"+
    "\15\0\22\3\156\0\111\3\67\0\63\3\15\0\63\3"+
    "\15\0\44\3\14\0\12\14\u0146\0\52\3\6\0\2\3"+
    "\116\0\35\3\12\0\1\3\10\0\26\3\152\0\25\3"+
    "\33\0\27\3\14\0\65\3\56\0\12\14\23\0\55\3"+
    "\40\0\31\3\7\0\12\14\11\0\44\3\17\0\12\14"+
    "\4\0\1\3\2\0\1\3\10\0\43\3\3\0\1\3"+
    "\14\0\60\3\16\0\4\3\13\0\12\14\1\3\1\0"+
    "\1\3\43\0\22\3\1\0\31\3\124\0\7\3\1\0"+
    "\1\3\1\0\4\3\1\0\17\3\1\0\12\3\7\0"+
    "\57\3\21\0\12\14\13\0\10\3\2\0\2\3\2\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\5\3\3\0"+
    "\1\3\22\0\1\3\14\0\5\3\236\0\65\3\22\0"+
    "\4\3\5\0\12\14\5\0\3\3\36\0\60\3\24\0"+
    "\2\3\1\0\1\3\10\0\12\14\246\0\57\3\51\0"+
    "\4\3\44\0\60\3\24\0\1\3\13\0\12\14\46\0"+
    "\53\3\15\0\1\3\7\0\12\14\66\0\33\3\25\0"+
    "\12\14\306\0\54\3\164\0\100\3\12\14\25\0\10\3"+
    "\2\0\1\3\2\0\10\3\1\0\2\3\1\0\30\3"+
    "\17\0\1\3\1\0\1\3\136\0\10\3\2\0\47\3"+
    "\20\0\1\3\1\0\1\3\34\0\1\3\12\0\50\3"+
    "\7\0\1\3\25\0\1\3\13\0\56\3\23\0\1\3"+
    "\42\0\71\3\7\0\11\3\1\0\45\3\21\0\1\3"+
    "\17\0\12\14\30\0\36\3\160\0\7\3\1\0\2\3"+
    "\1\0\46\3\25\0\1\3\11\0\12\14\6\0\6\3"+
    "\1\0\2\3\1\0\40\3\16\0\1\3\7\0\12\14"+
    "\u0136\0\23\3\275\0\1\3\54\0\4\3\37\0\232\3"+
    "\146\0\157\3\21\0\304\3\274\0\57\3\321\0\107\3"+
    "\271\0\71\3\7\0\37\3\1\0\12\14\146\0\36\3"+
    "\22\0\60\3\20\0\4\3\14\0\12\14\11\0\25\3"+
    "\5\0\23\3\260\0\100\3\200\0\113\3\5\0\1\3"+
    "\102\0\15\3\100\0\2\3\1\0\1\3\34\0\370\3"+
    "\10\0\326\3\52\0\11\3\367\0\37\3\61\0\3\3"+
    "\21\0\4\3\10\0\u018c\3\4\0\153\3\5\0\15\3"+
    "\3\0\11\3\7\0\12\3\146\0\125\3\1\0\107\3"+
    "\1\0\2\3\2\0\1\3\2\0\2\3\2\0\4\3"+
    "\1\0\14\3\1\0\1\3\1\0\7\3\1\0\101\3"+
    "\1\0\4\3\2\0\10\3\1\0\7\3\1\0\34\3"+
    "\1\0\4\3\1\0\5\3\1\0\1\3\3\0\7\3"+
    "\1\0\u0154\3\2\0\31\3\1\0\31\3\1\0\37\3"+
    "\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3"+
    "\1\0\31\3\1\0\37\3\1\0\31\3\1\0\10\3"+
    "\2\0\62\14\55\3\12\0\7\3\2\0\12\14\4\0"+
    "\1\3\u0171\0\54\3\4\0\12\14\5\0\306\3\73\0"+
    "\104\3\7\0\1\3\4\0\12\14\u0156\0\1\3\117\0"+
    "\4\3\1\0\33\3\1\0\2\3\1\0\1\3\2\0"+
    "\1\3\1\0\12\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\6\0\1\3\4\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\1\0\2\3\1\0\1\3\2\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\1\3\2\0\4\3\1\0"+
    "\7\3\1\0\4\3\1\0\4\3\1\0\1\3\1\0"+
    "\12\3\1\0\21\3\5\0\3\3\1\0\5\3\1\0"+
    "\21\3\104\0\336\3\42\0\65\3\13\0\336\3\2\0"+
    "\u0182\3\16\0\u0131\3\37\0\36\3\342\0\113\3\265\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\13\4\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\6\4\1\34\3\4\1\35\3\4\1\36\1\37\1\4"+
    "\1\40\3\4\1\41\1\42\2\4\1\43\1\44\3\4"+
    "\1\45\1\46\10\4\1\47\1\4\1\50\1\51\2\4"+
    "\1\52\1\53\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\45\0\45\0\112\0\45\0\45\0\45"+
    "\0\157\0\224\0\271\0\336\0\u0103\0\u0128\0\45\0\u014d"+
    "\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275"+
    "\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e\0\45\0\45\0\45"+
    "\0\45\0\45\0\45\0\u0353\0\45\0\u0378\0\45\0\45"+
    "\0\45\0\45\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456"+
    "\0\112\0\u047b\0\u04a0\0\u04c5\0\112\0\u04ea\0\u050f\0\u0534"+
    "\0\45\0\45\0\u0378\0\112\0\u0559\0\u057e\0\u05a3\0\u05c8"+
    "\0\112\0\u05ed\0\u0612\0\112\0\112\0\u0637\0\u065c\0\u0681"+
    "\0\112\0\112\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f"+
    "\0\u0784\0\u07a9\0\112\0\u07ce\0\112\0\112\0\u07f3\0\u0818"+
    "\0\112\0\112\0\112\0\112";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\5\1\27\2\5"+
    "\1\30\2\5\1\31\1\32\1\33\1\34\1\35\2\5"+
    "\1\36\1\37\50\0\1\5\15\0\22\5\11\0\1\40"+
    "\45\0\1\41\45\0\1\42\6\0\1\43\36\0\1\44"+
    "\45\0\1\45\43\0\1\46\1\0\1\16\47\0\1\47"+
    "\1\50\43\0\1\51\44\0\1\52\30\0\1\5\15\0"+
    "\13\5\1\53\6\5\5\0\1\5\15\0\14\5\1\54"+
    "\5\5\5\0\1\5\15\0\7\5\1\55\12\5\5\0"+
    "\1\5\15\0\14\5\1\56\5\5\5\0\1\5\15\0"+
    "\14\5\1\57\4\5\1\60\5\0\1\5\15\0\5\5"+
    "\1\61\4\5\1\62\1\63\6\5\5\0\1\5\15\0"+
    "\14\5\1\64\5\5\5\0\1\5\15\0\16\5\1\65"+
    "\3\5\5\0\1\5\15\0\16\5\1\66\3\5\5\0"+
    "\1\5\15\0\4\5\1\67\15\5\5\0\1\5\15\0"+
    "\20\5\1\70\1\5\14\0\1\71\4\0\1\72\41\0"+
    "\1\73\33\0\1\5\15\0\3\5\1\74\16\5\5\0"+
    "\1\5\15\0\14\5\1\75\5\5\5\0\1\5\15\0"+
    "\1\76\21\5\5\0\1\5\15\0\21\5\1\77\5\0"+
    "\1\5\15\0\16\5\1\100\3\5\5\0\1\5\15\0"+
    "\13\5\1\101\6\5\5\0\1\5\15\0\15\5\1\102"+
    "\4\5\5\0\1\5\15\0\15\5\1\103\2\5\1\104"+
    "\1\5\5\0\1\5\15\0\20\5\1\105\1\5\5\0"+
    "\1\5\15\0\10\5\1\106\11\5\5\0\1\5\15\0"+
    "\20\5\1\107\1\5\5\0\1\5\15\0\16\5\1\110"+
    "\3\5\5\0\1\5\15\0\11\5\1\111\10\5\5\0"+
    "\1\5\15\0\16\5\1\112\3\5\5\0\1\5\15\0"+
    "\1\5\1\113\20\5\5\0\1\5\15\0\10\5\1\114"+
    "\11\5\5\0\1\5\15\0\14\5\1\115\5\5\5\0"+
    "\1\5\15\0\21\5\1\116\5\0\1\5\15\0\13\5"+
    "\1\117\6\5\5\0\1\5\15\0\21\5\1\120\5\0"+
    "\1\5\15\0\10\5\1\121\11\5\5\0\1\5\15\0"+
    "\11\5\1\122\10\5\5\0\1\5\15\0\5\5\1\123"+
    "\14\5\5\0\1\5\15\0\16\5\1\124\3\5\5\0"+
    "\1\5\15\0\20\5\1\125\1\5\5\0\1\5\15\0"+
    "\20\5\1\126\1\5\5\0\1\5\15\0\16\5\1\127"+
    "\3\5\5\0\1\5\15\0\13\5\1\130\6\5\5\0"+
    "\1\5\15\0\4\5\1\131\15\5\5\0\1\5\15\0"+
    "\20\5\1\132\1\5\5\0\1\5\15\0\13\5\1\133"+
    "\6\5\5\0\1\5\15\0\6\5\1\134\13\5\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2109];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\6\1\1\11\16\1\6\11"+
    "\1\1\1\11\1\0\4\11\16\1\2\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    String name;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(" ?");
            }
          // fall through
          case 46: break;
          case 2:
            { System.out.print(yytext());
            }
          // fall through
          case 47: break;
          case 3:
            { System.out.print(" ");
            }
          // fall through
          case 48: break;
          case 4:
            { System.out.print(" " + yytext());
            }
          // fall through
          case 49: break;
          case 5:
            { System.out.print(" op:modulo");
            }
          // fall through
          case 50: break;
          case 6:
            { System.out.print(" del:paréntesis_izquierdo");
            }
          // fall through
          case 51: break;
          case 7:
            { System.out.print(" del:paréntesis_derecho");
            }
          // fall through
          case 52: break;
          case 8:
            { System.out.print(" op:multiplicación");
            }
          // fall through
          case 53: break;
          case 9:
            { System.out.print(" op:suma");
            }
          // fall through
          case 54: break;
          case 10:
            { System.out.print(" op:resta");
            }
          // fall through
          case 55: break;
          case 11:
            { System.out.print(" op:división");
            }
          // fall through
          case 56: break;
          case 12:
            { System.out.print(" del:final_linea");
            }
          // fall through
          case 57: break;
          case 13:
            { System.out.print(" op:menor");
            }
          // fall through
          case 58: break;
          case 14:
            { System.out.print(" op:asignación");
            }
          // fall through
          case 59: break;
          case 15:
            { System.out.print(" op:mayor");
            }
          // fall through
          case 60: break;
          case 16:
            { System.out.print(" del:llave_izquierda");
            }
          // fall through
          case 61: break;
          case 17:
            { System.out.print(" del:llave_derecha");
            }
          // fall through
          case 62: break;
          case 18:
            { System.out.print(" op:potencia");
            }
          // fall through
          case 63: break;
          case 19:
            { System.out.print(" op:incremento");
            }
          // fall through
          case 64: break;
          case 20:
            { System.out.print(" op:decremento");
            }
          // fall through
          case 65: break;
          case 21:
            { System.out.print(" op:definición_retorno");
            }
          // fall through
          case 66: break;
          case 22:
            { System.out.print(" op:rango_exclusivo");
            }
          // fall through
          case 67: break;
          case 23:
            { System.out.print(" cmnt:comentario");
            }
          // fall through
          case 68: break;
          case 24:
            { System.out.print(" op:menor_igual");
            }
          // fall through
          case 69: break;
          case 25:
            { System.out.print(" op:diferente");
            }
          // fall through
          case 70: break;
          case 26:
            { System.out.print(" op:igual");
            }
          // fall through
          case 71: break;
          case 27:
            { System.out.print(" op:mayor_igual");
            }
          // fall through
          case 72: break;
          case 28:
            { System.out.print(" ctl:if");
            }
          // fall through
          case 73: break;
          case 29:
            { System.out.print(" op:or");
            }
          // fall through
          case 74: break;
          case 30:
            { System.out.print(" op:concatenación");
            }
          // fall through
          case 75: break;
          case 31:
            { System.out.print(" op:inclusivo");
            }
          // fall through
          case 76: break;
          case 32:
            { System.out.print(" op:and");
            }
          // fall through
          case 77: break;
          case 33:
            { System.out.print(" ctl:for");
            }
          // fall through
          case 78: break;
          case 34:
            { System.out.print(" def:función");
            }
          // fall through
          case 79: break;
          case 35:
            { System.out.print(" tipo:entero");
            }
          // fall through
          case 80: break;
          case 36:
            { System.out.print(" op:not");
            }
          // fall through
          case 81: break;
          case 37:
            { System.out.print(" tipo:booleano");
            }
          // fall through
          case 82: break;
          case 38:
            { System.out.print(" tipo:carácter");
            }
          // fall through
          case 83: break;
          case 39:
            { System.out.print(" ctl:forif");
            }
          // fall through
          case 84: break;
          case 40:
            { System.out.print(" io:entrada");
            }
          // fall through
          case 85: break;
          case 41:
            { System.out.print(" io:salida");
            }
          // fall through
          case 86: break;
          case 42:
            { System.out.print(" tipo:decimal");
            }
          // fall through
          case 87: break;
          case 43:
            { System.out.print(" def:importar");
            }
          // fall through
          case 88: break;
          case 44:
            { System.out.print(" def:retorno");
            }
          // fall through
          case 89: break;
          case 45:
            { System.out.print(" tipo:cadena");
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
