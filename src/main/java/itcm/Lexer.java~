// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: src/main/jflex/itcm/Lexer.flex

package itcm;
import static itcm.Tokens.*;


@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\10\u3000\31\u2000\1\u1100\1\u3100\1\u3200\1\u1100\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u2000\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u1100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u2000\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u2000\1\u4e00\1\u4f00"+
    "\1\u5000\1\u2000\3\u1100\1\u5100\1\u5200\1\u5300\12\u2000\4\u1100"+
    "\1\u5400\17\u2000\2\u1100\1\u5500\41\u2000\2\u1100\1\u5600\1\u5700"+
    "\2\u2000\1\u5800\1\u5900\27\u1100\1\u5a00\2\u1100\1\u5b00\45\u2000"+
    "\1\u1100\1\u5c00\1\u5d00\11\u2000\1\u5e00\27\u2000\1\u5f00\1\u6000"+
    "\1\u6100\1\u6200\11\u2000\1\u6300\1\u6400\5\u2000\1\u6500\1\u6600"+
    "\4\u2000\1\u6700\21\u2000\246\u1100\1\u6800\20\u1100\1\u6900\1\u6a00"+
    "\25\u1100\1\u6b00\34\u1100\1\u6c00\14\u2000\2\u1100\1\u6d00\u0e05\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\2\1\1\22\0\1\3\4\0\1\4"+
    "\2\0\2\4\1\5\1\6\1\1\1\7\1\10\1\11"+
    "\12\12\1\0\1\13\1\14\1\15\1\16\2\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\30\1\31\1\32\1\33\1\34\1\35\1\30\1\36"+
    "\1\37\1\40\1\41\5\30\6\0\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\30\1\36\1\37\1\40"+
    "\1\41\5\30\1\4\1\0\1\4\7\0\1\2\44\0"+
    "\1\30\12\0\1\30\4\0\1\30\5\0\27\30\1\0"+
    "\37\30\1\0\70\30\2\27\115\30\1\37\u0142\30\4\0"+
    "\14\30\16\0\5\30\7\0\1\30\1\0\1\30\201\0"+
    "\5\30\1\0\2\30\2\0\4\30\1\0\1\30\6\0"+
    "\1\30\1\0\3\30\1\0\1\30\1\0\24\30\1\0"+
    "\123\30\1\0\213\30\10\0\246\30\1\0\46\30\2\0"+
    "\1\30\6\0\51\30\107\0\33\30\4\0\4\30\55\0"+
    "\53\30\25\0\12\12\4\0\2\30\1\0\143\30\1\0"+
    "\1\30\17\0\2\30\7\0\2\30\12\12\3\30\2\0"+
    "\1\30\20\0\1\30\1\0\36\30\35\0\131\30\13\0"+
    "\1\30\16\0\12\12\41\30\11\0\2\30\4\0\1\30"+
    "\5\0\26\30\4\0\1\30\11\0\1\30\3\0\1\30"+
    "\27\0\31\30\7\0\13\30\65\0\25\30\1\0\10\30"+
    "\106\0\66\30\3\0\1\30\22\0\1\30\7\0\12\30"+
    "\4\0\12\12\1\0\20\30\4\0\10\30\2\0\2\30"+
    "\2\0\26\30\1\0\7\30\1\0\1\30\3\0\4\30"+
    "\3\0\1\30\20\0\1\30\15\0\2\30\1\0\3\30"+
    "\4\0\12\12\2\30\12\0\1\30\10\0\6\30\4\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0"+
    "\2\30\1\0\2\30\37\0\4\30\1\0\1\30\7\0"+
    "\12\12\2\0\3\30\20\0\11\30\1\0\3\30\1\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\3\0"+
    "\1\30\22\0\1\30\17\0\2\30\4\0\12\12\11\0"+
    "\1\30\13\0\10\30\2\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\5\30\3\0\1\30\36\0"+
    "\2\30\1\0\3\30\4\0\12\12\1\0\1\30\21\0"+
    "\1\30\1\0\6\30\3\0\3\30\1\0\4\30\3\0"+
    "\2\30\1\0\1\30\1\0\2\30\3\0\2\30\3\0"+
    "\3\30\3\0\14\30\26\0\1\30\25\0\12\12\25\0"+
    "\10\30\1\0\3\30\1\0\27\30\1\0\20\30\3\0"+
    "\1\30\32\0\3\30\5\0\2\30\4\0\12\12\20\0"+
    "\1\30\4\0\10\30\1\0\3\30\1\0\27\30\1\0"+
    "\12\30\1\0\5\30\3\0\1\30\40\0\1\30\1\0"+
    "\2\30\4\0\12\12\1\0\2\30\22\0\10\30\1\0"+
    "\3\30\1\0\51\30\2\0\1\30\20\0\1\30\5\0"+
    "\3\30\10\0\3\30\4\0\12\12\12\0\6\30\5\0"+
    "\22\30\3\0\30\30\1\0\11\30\1\0\1\30\2\0"+
    "\7\30\37\0\12\12\21\0\60\30\1\0\2\30\14\0"+
    "\7\30\11\0\12\12\47\0\2\30\1\0\1\30\1\0"+
    "\5\30\1\0\30\30\1\0\1\30\1\0\12\30\1\0"+
    "\2\30\11\0\1\30\2\0\5\30\1\0\1\30\11\0"+
    "\12\12\2\0\4\30\40\0\1\30\37\0\12\12\26\0"+
    "\10\30\1\0\44\30\33\0\5\30\163\0\53\30\24\0"+
    "\1\30\12\12\6\0\6\30\4\0\4\30\3\0\1\30"+
    "\3\0\2\30\7\0\3\30\4\0\15\30\14\0\1\30"+
    "\1\0\12\12\6\0\46\30\1\0\1\30\5\0\1\30"+
    "\2\0\53\30\1\0\u014d\30\1\0\4\30\2\0\7\30"+
    "\1\0\1\30\1\0\4\30\2\0\51\30\1\0\4\30"+
    "\2\0\41\30\1\0\4\30\2\0\7\30\1\0\1\30"+
    "\1\0\4\30\2\0\17\30\1\0\71\30\1\0\4\30"+
    "\2\0\103\30\45\0\20\30\20\0\126\30\2\0\6\30"+
    "\3\0\u016c\30\2\0\21\30\1\0\32\30\5\0\113\30"+
    "\6\0\10\30\7\0\15\30\1\0\4\30\16\0\22\30"+
    "\16\0\22\30\16\0\15\30\1\0\3\30\17\0\64\30"+
    "\43\0\1\30\4\0\1\30\3\0\12\12\46\0\12\12"+
    "\6\0\131\30\7\0\5\30\2\0\42\30\1\0\1\30"+
    "\5\0\106\30\12\0\37\30\47\0\12\12\36\30\2\0"+
    "\5\30\13\0\54\30\4\0\32\30\6\0\12\12\46\0"+
    "\27\30\11\0\65\30\53\0\12\12\6\0\12\12\15\0"+
    "\1\30\135\0\57\30\21\0\7\30\4\0\12\12\51\0"+
    "\36\30\15\0\2\30\12\12\54\30\32\0\44\30\34\0"+
    "\12\12\3\0\3\30\12\12\44\30\2\0\11\30\7\0"+
    "\53\30\2\0\3\30\51\0\4\30\1\0\6\30\1\0"+
    "\2\30\3\0\1\30\5\0\300\30\100\0\26\30\2\0"+
    "\6\30\2\0\46\30\2\0\6\30\2\0\10\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\37\30\2\0"+
    "\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0"+
    "\7\30\3\0\4\30\2\0\6\30\4\0\15\30\5\0"+
    "\3\30\1\0\7\30\53\0\2\2\107\0\1\30\15\0"+
    "\1\30\20\0\15\30\145\0\1\30\4\0\1\30\2\0"+
    "\12\30\1\0\1\30\3\0\5\30\6\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\4\30\1\0\13\30\2\0"+
    "\4\30\5\0\5\30\4\0\1\30\64\0\2\30\u017b\0"+
    "\57\30\1\0\57\30\1\0\205\30\6\0\4\30\3\0"+
    "\2\30\14\0\46\30\1\0\1\30\5\0\1\30\2\0"+
    "\70\30\7\0\1\30\20\0\27\30\11\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\120\0\1\30\325\0"+
    "\2\30\52\0\5\30\5\0\2\30\4\0\126\30\6\0"+
    "\3\30\1\0\132\30\1\0\4\30\5\0\53\30\1\0"+
    "\136\30\21\0\33\30\65\0\306\30\112\0\360\30\20\0"+
    "\215\30\103\0\56\30\2\0\15\30\3\0\20\30\12\12"+
    "\2\30\24\0\57\30\20\0\37\30\2\0\106\30\61\0"+
    "\11\30\2\0\147\30\2\0\65\30\2\0\5\30\60\0"+
    "\13\30\1\0\3\30\1\0\4\30\1\0\27\30\35\0"+
    "\64\30\16\0\62\30\34\0\12\12\30\0\6\30\3\0"+
    "\1\30\1\0\2\30\1\0\12\12\34\30\12\0\27\30"+
    "\31\0\35\30\7\0\57\30\34\0\1\30\12\12\6\0"+
    "\5\30\1\0\12\30\12\12\5\30\1\0\51\30\27\0"+
    "\3\30\1\0\10\30\4\0\12\12\6\0\27\30\3\0"+
    "\1\30\3\0\62\30\1\0\1\30\3\0\2\30\2\0"+
    "\5\30\2\0\1\30\1\0\1\30\30\0\3\30\2\0"+
    "\13\30\7\0\3\30\14\0\6\30\2\0\6\30\2\0"+
    "\6\30\11\0\7\30\1\0\7\30\1\0\53\30\1\0"+
    "\14\30\10\0\163\30\15\0\12\12\6\0\244\30\14\0"+
    "\27\30\4\0\61\30\4\0\u0100\2\156\30\2\0\152\30"+
    "\46\0\7\30\14\0\5\30\5\0\1\30\1\0\12\30"+
    "\1\0\15\30\1\0\5\30\1\0\1\30\1\0\2\30"+
    "\1\0\2\30\1\0\154\30\41\0\153\30\22\0\100\30"+
    "\2\0\66\30\50\0\14\30\164\0\5\30\1\0\207\30"+
    "\23\0\12\12\7\0\32\30\6\0\32\30\13\0\131\30"+
    "\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30"+
    "\43\0\14\30\1\0\32\30\1\0\23\30\1\0\2\30"+
    "\1\0\17\30\2\0\16\30\42\0\173\30\205\0\35\30"+
    "\3\0\61\30\57\0\40\30\15\0\24\30\1\0\10\30"+
    "\6\0\46\30\12\0\36\30\2\0\44\30\4\0\10\30"+
    "\60\0\236\30\2\0\12\12\6\0\44\30\4\0\44\30"+
    "\4\0\50\30\10\0\64\30\234\0\67\30\11\0\26\30"+
    "\12\0\10\30\230\0\6\30\2\0\1\30\1\0\54\30"+
    "\1\0\2\30\3\0\1\30\2\0\27\30\12\0\27\30"+
    "\11\0\37\30\101\0\23\30\1\0\2\30\12\0\26\30"+
    "\12\0\32\30\106\0\70\30\6\0\2\30\100\0\1\30"+
    "\17\0\4\30\1\0\3\30\1\0\35\30\52\0\35\30"+
    "\3\0\35\30\43\0\10\30\1\0\34\30\33\0\66\30"+
    "\12\0\26\30\12\0\23\30\15\0\22\30\156\0\111\30"+
    "\67\0\63\30\15\0\63\30\15\0\44\30\14\0\12\12"+
    "\306\0\35\30\12\0\1\30\10\0\26\30\232\0\27\30"+
    "\14\0\65\30\56\0\12\12\23\0\55\30\40\0\31\30"+
    "\7\0\12\12\11\0\44\30\17\0\12\12\4\0\1\30"+
    "\13\0\43\30\3\0\1\30\14\0\60\30\16\0\4\30"+
    "\13\0\12\12\1\30\1\0\1\30\43\0\22\30\1\0"+
    "\31\30\124\0\7\30\1\0\1\30\1\0\4\30\1\0"+
    "\17\30\1\0\12\30\7\0\57\30\21\0\12\12\13\0"+
    "\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0"+
    "\2\30\1\0\5\30\3\0\1\30\22\0\1\30\14\0"+
    "\5\30\236\0\65\30\22\0\4\30\5\0\12\12\5\0"+
    "\1\30\40\0\60\30\24\0\2\30\1\0\1\30\10\0"+
    "\12\12\246\0\57\30\51\0\4\30\44\0\60\30\24\0"+
    "\1\30\13\0\12\12\46\0\53\30\15\0\1\30\7\0"+
    "\12\12\66\0\33\30\25\0\12\12\306\0\54\30\164\0"+
    "\100\30\12\12\25\0\1\30\240\0\10\30\2\0\47\30"+
    "\20\0\1\30\1\0\1\30\34\0\1\30\12\0\50\30"+
    "\7\0\1\30\25\0\1\30\13\0\56\30\23\0\1\30"+
    "\42\0\71\30\7\0\11\30\1\0\45\30\21\0\1\30"+
    "\17\0\12\12\30\0\36\30\160\0\7\30\1\0\2\30"+
    "\1\0\46\30\25\0\1\30\11\0\12\12\6\0\6\30"+
    "\1\0\2\30\1\0\40\30\16\0\1\30\7\0\12\12"+
    "\u0136\0\23\30\15\0\232\30\346\0\304\30\274\0\57\30"+
    "\321\0\107\30\271\0\71\30\7\0\37\30\1\0\12\12"+
    "\146\0\36\30\22\0\60\30\20\0\4\30\14\0\12\12"+
    "\11\0\25\30\5\0\23\30\260\0\100\30\200\0\113\30"+
    "\5\0\1\30\102\0\15\30\100\0\2\30\1\0\1\30"+
    "\34\0\370\30\10\0\363\30\15\0\37\30\61\0\3\30"+
    "\21\0\4\30\10\0\u018c\30\4\0\153\30\5\0\15\30"+
    "\3\0\11\30\7\0\12\30\146\0\125\30\1\0\107\30"+
    "\1\0\2\30\2\0\1\30\2\0\2\30\2\0\4\30"+
    "\1\0\14\30\1\0\1\30\1\0\7\30\1\0\101\30"+
    "\1\0\4\30\2\0\10\30\1\0\7\30\1\0\34\30"+
    "\1\0\4\30\1\0\5\30\1\0\1\30\3\0\7\30"+
    "\1\0\u0154\30\2\0\31\30\1\0\31\30\1\0\37\30"+
    "\1\0\31\30\1\0\37\30\1\0\31\30\1\0\37\30"+
    "\1\0\31\30\1\0\37\30\1\0\31\30\1\0\10\30"+
    "\2\0\62\12\55\30\12\0\7\30\2\0\12\12\4\0"+
    "\1\30\u0171\0\54\30\4\0\12\12\6\0\305\30\73\0"+
    "\104\30\7\0\1\30\4\0\12\12\246\0\4\30\1\0"+
    "\33\30\1\0\2\30\1\0\1\30\2\0\1\30\1\0"+
    "\12\30\1\0\4\30\1\0\1\30\1\0\1\30\6\0"+
    "\1\30\4\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\3\30\1\0\2\30\1\0\1\30\2\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\2\30\1\0\1\30\2\0\4\30\1\0\7\30\1\0"+
    "\4\30\1\0\4\30\1\0\1\30\1\0\12\30\1\0"+
    "\21\30\5\0\3\30\1\0\5\30\1\0\21\30\104\0"+
    "\327\30\51\0\65\30\13\0\336\30\2\0\u0182\30\16\0"+
    "\u0131\30\37\0\36\30\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28160];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\4\4\1\1\1\4\1\5"+
    "\1\6\2\4\14\5\1\4\1\7\1\0\6\5\1\10"+
    "\3\5\1\4\7\5\1\10\2\5\1\11\14\5\1\12"+
    "\1\13\1\5\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\104\0\42\0\146\0\210\0\252"+
    "\0\314\0\356\0\u0110\0\42\0\u0132\0\u0154\0\u0176\0\u0198"+
    "\0\u01ba\0\u01dc\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8"+
    "\0\u02ca\0\u02ec\0\u030e\0\42\0\u0330\0\u0352\0\u0374\0\u0396"+
    "\0\u03b8\0\u03da\0\u03fc\0\u01fe\0\u041e\0\u0440\0\u0462\0\u01fe"+
    "\0\u0484\0\u04a6\0\u04c8\0\u0330\0\u04ea\0\u050c\0\u052e\0\u0550"+
    "\0\u0572\0\u0594\0\u01fe\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e"+
    "\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u01fe"+
    "\0\u01fe\0\u074e\0\u01fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\23\1\25\3\23\1\26"+
    "\1\27\1\30\1\31\1\32\2\23\43\0\1\3\1\0"+
    "\1\3\43\0\1\5\42\0\1\5\42\0\1\5\6\0"+
    "\1\5\33\0\1\33\42\0\1\34\40\0\1\35\1\0"+
    "\1\13\44\0\2\5\40\0\1\5\43\0\14\23\1\36"+
    "\6\23\17\0\15\23\1\37\5\23\17\0\7\23\1\40"+
    "\13\23\17\0\15\23\1\41\5\23\17\0\23\23\17\0"+
    "\15\23\1\42\4\23\1\43\17\0\5\23\1\44\5\23"+
    "\1\45\1\46\6\23\17\0\15\23\1\47\5\23\17\0"+
    "\17\23\1\50\3\23\17\0\17\23\1\51\3\23\17\0"+
    "\4\23\1\52\16\23\17\0\21\23\1\53\1\23\10\0"+
    "\1\5\4\0\1\5\36\0\1\54\46\0\3\23\1\50"+
    "\17\23\17\0\15\23\1\55\5\23\17\0\1\56\22\23"+
    "\17\0\22\23\1\57\17\0\17\23\1\60\3\23\17\0"+
    "\14\23\1\44\6\23\17\0\16\23\1\61\4\23\17\0"+
    "\16\23\1\62\2\23\1\63\1\23\17\0\21\23\1\50"+
    "\1\23\17\0\10\23\1\64\12\23\17\0\21\23\1\65"+
    "\1\23\17\0\17\23\1\66\3\23\17\0\12\23\1\63"+
    "\10\23\17\0\17\23\1\63\3\23\17\0\1\23\1\67"+
    "\21\23\17\0\10\23\1\70\12\23\17\0\15\23\1\71"+
    "\5\23\17\0\22\23\1\72\17\0\14\23\1\73\6\23"+
    "\17\0\22\23\1\74\17\0\10\23\1\75\12\23\17\0"+
    "\12\23\1\76\10\23\17\0\5\23\1\44\15\23\17\0"+
    "\17\23\1\77\3\23\17\0\21\23\1\100\1\23\17\0"+
    "\21\23\1\101\1\23\17\0\17\23\1\43\3\23\17\0"+
    "\14\23\1\102\6\23\17\0\4\23\1\63\16\23\17\0"+
    "\21\23\1\103\1\23\17\0\6\23\1\63\14\23";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1904];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\6\1\1\11\17\1\1\11"+
    "\1\0\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    String name;
    int line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
          // fall through
          case 13: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 14: break;
          case 3:
            { System.out.print("");
            }
          // fall through
          case 15: break;
          case 4:
            { name=yytext(); line=yyline; return Operador;
            }
          // fall through
          case 16: break;
          case 5:
            { System.out.println(yytext());
            }
          // fall through
          case 17: break;
          case 6:
            { return Delimitador;
            }
          // fall through
          case 18: break;
          case 7:
            { System.out.println("//");
            }
          // fall through
          case 19: break;
          case 8:
            { name=yytext(); line=yyline; return Reservadas;
            }
          // fall through
          case 20: break;
          case 9:
            { name=yytext(); line=yyline; return TipoDeDato;
            }
          // fall through
          case 21: break;
          case 10:
            { System.out.println("input");
            }
          // fall through
          case 22: break;
          case 11:
            { System.out.println("print");
            }
          // fall through
          case 23: break;
          case 12:
            { System.out.println("import");
            }
          // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
